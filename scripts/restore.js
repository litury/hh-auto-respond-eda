const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const backupsDir = path.join(__dirname, '../backups');

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
const backups = fs.readdirSync(backupsDir)
  .filter(file => file.endsWith('.sql'))
  .sort()
  .reverse();

if (backups.length === 0) {
  console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –≤ –ø–∞–ø–∫–µ backups/');
  process.exit(1);
}

console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:\n');
backups.forEach((file, index) => {
  const filepath = path.join(backupsDir, file);
  const stats = fs.statSync(filepath);
  const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
  console.log(`   [${index + 1}] ${file} (${fileSizeInMB} MB)`);
});

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ): ', (answer) => {
  const index = answer.trim() === '' ? 0 : parseInt(answer) - 1;

  if (index < 0 || index >= backups.length) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞');
    rl.close();
    process.exit(1);
  }

  const selectedBackup = backups[index];
  const filepath = path.join(backupsDir, selectedBackup);

  console.log(`\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!`);

  rl.question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ', (confirm) => {
    if (confirm.toLowerCase() !== 'yes') {
      console.log('‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      rl.close();
      process.exit(0);
    }

    console.log(`\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ ${selectedBackup}...`);

    const command = `docker exec -i adtech-postgres psql -U postgres -d adtech_dev < "${filepath}"`;

    exec(command, (error, stdout, stderr) => {
      rl.close();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
        process.exit(1);
      }

      console.log('‚úÖ –ë–î —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞!\n');
    });
  });
});
