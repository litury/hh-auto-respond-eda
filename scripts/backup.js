const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

const backupsDir = path.join(__dirname, '../backups');
const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
const filename = `backup_${timestamp}.sql`;
const filepath = path.join(backupsDir, filename);

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É backups –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(backupsDir)) {
  fs.mkdirSync(backupsDir, { recursive: true });
}

console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î...');

const command = `docker exec adtech-postgres pg_dump -U postgres -d adtech_dev > "${filepath}"`;

exec(command, (error, stdout, stderr) => {
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error.message);
    process.exit(1);
  }

  if (stderr) {
    console.error('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);
  }

  const stats = fs.statSync(filepath);
  const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);

  console.log(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${filename}`);
  console.log(`   –†–∞–∑–º–µ—Ä: ${fileSizeInMB} MB`);
  console.log(`   –ü—É—Ç—å: ${filepath}\n`);
});
